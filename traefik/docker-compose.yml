version: '3'

services:

  traefik:
    container_name: traefik
    image: traefik:v2.6
    command:
      # - --log.level=DEBUG
      # Global
      - --global.checknewversion=false
      - --global.sendAnonymousUsage=false
      # API
      - --api
      - --api.dashboard=true
      - --api.insecure=true
      - --api.debug=true
      # Entrypoints
      - --entrypoints.web.address=:80
      # Redirect ALL HTTP traffic to HTTPS
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.traefik.address=:8081
      # Provider Info
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/etc/traefik/dynamic/config.yml
      - --providers.file.watch=true
    labels:
      - traefik.enable=true
      # middleware redirect
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.port=8443
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
      # global redirect to https
      # - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      # - traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)
      # - traefik.http.routers.http-catchall.entrypoints=web
      # - traefik.http.routers.http-catchall.middlewares=redirect-to-https

    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8081:8081" 
      # The HTTPS port
      - "443:443"
    volumes:
      - ./config/traefik:/etc/traefik
      # - ./config/certs:/config/certs
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik-proxy

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest

    ports:
      - "8000:8000"
      - "9000:9000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    networks:
      - traefik-proxy
  
  nginx:
    container_name: nginx
    image: nginx:1.17
    labels:
      - traefik.enable=true
      #- traefik.docker.network=traefik-proxy
      #- traefik.http.routers.ngnix.entrypoints=web
      #- traefik.http.routers.ngnix.rule=Host(`nginx.fires.division`)
      - traefik.http.routers.ngnix-ssl.entrypoints=websecure
      - traefik.http.routers.ngnix-ssl.rule=Host(`nginx.fires.division`)
      #- traefik.http.routers.ngnix-ssl.tls=true
      - traefik.http.services.ngnix.loadbalancer.server.port=80
    networks:
      - traefik-proxy

  jira:
    container_name: jira
    image: atlassian/jira-software:8
    labels:
      - traefik.enable=true
      #- traefik.docker.network=traefik-proxy
      #- traefik.http.routers.jira.entrypoints=web
      #- traefik.http.routers.jira.rule=Host(`jira.fires.division`)
      - traefik.http.routers.jira-ssl.entrypoints=websecure
      - traefik.http.routers.jira-ssl.rule=Host(`jira.fires.division`)
      #- traefik.http.routers.jira-ssl.tls=true
      - traefik.http.services.jira.loadbalancer.server.port=8080
    volumes:
      - jira:/var/atlassian/application-data/jira
    environment:
      ATL_PROXY_NAME: jira.fires.division
      #ATL_PROXY_PORT: 8080
      #ATL_TOMCAT_SCHEME: http 
      ATL_PROXY_PORT: 8443
      ATL_TOMCAT_SCHEME: https
      ATL_TOMCAT_SECURE: 'false'
    networks:
      - traefik-proxy
    depends_on:
      - db

  confluence:
    container_name: confluence
    image: atlassian/confluence-server:7
    labels:
      - traefik.enable=true
      #- traefik.docker.network=traefik-proxy
      #- traefik.http.routers.confluence.entrypoints=web
      #- traefik.http.routers.confluence.rule=Host(`confluence.fires.division`)
      - traefik.http.routers.confluence-ssl.entrypoints=websecure
      - traefik.http.routers.confluence-ssl.rule=Host(`confluence.fires.division`)
      #- traefik.http.routers.confluence-ssl.tls=true
      - traefik.http.services.confluence.loadbalancer.server.port=8090
    volumes:
      - confluence:/var/atlassian/application-data/confluence
    environment:
      ATL_PROXY_NAME: confluence.fires.division
      #ATL_PROXY_PORT: 8080
      #ATL_TOMCAT_SCHEME: http
      ATL_PROXY_PORT: 8443
      ATL_TOMCAT_SCHEME: https
      ATL_TOMCAT_SECURE: 'false'
    networks:
      - traefik-proxy
    depends_on:
      - db

  bitbucket:
    container_name: bitbucket
    image: atlassian/bitbucket-server:7
    labels:
      - traefik.enable=true
      #- traefik.docker.network=traefik-proxy
      #- traefik.http.routers.bitbucket.entrypoints=web
      #- traefik.http.routers.bitbucket.rule=Host(`bitbucket.fires.division`)
      - traefik.http.routers.bitbucket-ssl.entrypoints=websecure
      - traefik.http.routers.bitbucket-ssl.rule=Host(`bitbucket.fires.division`)
      #- traefik.http.routers.bitbucket-ssl.tls=true
      - traefik.http.services.bitbucket.loadbalancer.server.port=7990
    ports:
      - "7999:7999"
    volumes:
      - bitbucket:/var/atlassian/application-data/bitbucket
    environment:
      SERVER_PROXY_NAME: bitbucket.fires.division
      #SERVER_PROXY_PORT: 8080
      #SERVER_SCHEME: http 
      SERVER_PROXY_PORT: 8443
      SERVER_SCHEME: https
      SERVER_SECURE: 'false'
    networks:
      - traefik-proxy
    depends_on:
      - db

  jenkins:
    container_name: jenkins
    image: jenkins/jenkins:lts
    labels:
      - traefik.enable=true
      #- traefik.docker.network=traefik-proxy
      #- traefik.http.routers.jenkins.entrypoints=web
      #- traefik.http.routers.jenkins.rule=Host(`jenkins.fires.division`)
      - traefik.http.routers.jenkins-ssl.entrypoints=websecure
      - traefik.http.routers.jenkins-ssl.rule=Host(`jenkins.fires.division`)
      #- traefik.http.routers.jenkins-ssl.tls=true
      - traefik.http.services.jenkins.loadbalancer.server.port=8080
    volumes:
      - jenkins:/var/jenkins_home
    networks:
      - traefik-proxy

  nexus:
    container_name: nexus
    image: sonatype/nexus3:3.37.3
    labels:
      - traefik.enable=true
      #- traefik.docker.network=traefik-proxy  
      #- traefik.http.routers.nexus.entrypoints=web
      #- traefik.http.routers.nexus.rule=Host(`nexus.fires.division`)
      - traefik.http.routers.nexus-ssl.entrypoints=websecure
      - traefik.http.routers.nexus-ssl.service=nexus-ssl
      - traefik.http.routers.nexus-ssl.rule=Host(`nexus.fires.division`)
      #- traefik.http.routers.nexus-ssl.tls=true
      - traefik.http.services.nexus-ssl.loadbalancer.server.port=8081
      # NEXUS REPO
      - traefik.http.routers.nexus-docker.entrypoints=websecure
      - traefik.http.routers.nexus-docker.service=nexus-docker
      - traefik.http.routers.nexus-docker.rule=Host(`repo.fires.division`)
      #- traefik.http.routers.nexus-docker.tls=true
      - traefik.http.services.nexus-docker.loadbalancer.server.port=9000
      # NEXUS REGISTRY
      - traefik.http.routers.nexus-registry-1.entrypoints=websecure
      - traefik.http.routers.nexus-registry-1.service=nexus-registry-1
      - traefik.http.routers.nexus-registry-1.rule=Host(`registry-1.fires.division`)
      #- traefik.http.routers.nexus-docker.tls=true
      - traefik.http.services.nexus-registry-1.loadbalancer.server.port=9050
    volumes:
      - nexus:/nexus-data
    networks:
      - traefik-proxy

  db:
    container_name: postgres10
    image: postgres:10
    volumes:
      - ./config/postgres:/docker-entrypoint-initdb.d
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: qwerQWER
    networks:
      - traefik-proxy

networks:
  traefik-proxy:
    external: true

volumes:
  jira:
    external: true
  confluence:
    external: true
  bitbucket:
    external: true
  jenkins:
    external: true
  postgres:
    external: true
  nexus:
    external: true
  portainer:
    external: true
